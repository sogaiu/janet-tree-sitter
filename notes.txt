* why is there a seg fault when exiting repl that uses this?
  * keep checking...once wrappers are removed, there's a chance
    this will be fixed.
  * use valgrind if problem surfaces again / try examining core files.
    * valgrind can be run on the generated test file (look for files
      beginning with an underscore)
  * may be it's the case that we're not cleaning up the dynamic libraries
    that we're loading (e.g. clojure.so)

* don't use cfun_ prefix, use jts_ prefix instead?

* figure out how to get debug output from parsing
  * --debug-graph
  * --debug
    * figure out how to make logging more generic

* added a bunch of duplication of parser.c to tree_sitter.c to
  get dot_graph printing working (for the parser).  can this
  be avoided?  may be neovim code has hints.  didn't find any...

* nicer if cfun_parser_parse_string can handle buffers as input?

  may be the following could be adapted?

/* Get a c like string, but also works with buffers. */
static const char *jaylib_getcstring(const Janet *argv, int32_t n) {
    if (janet_checktype(argv[n], JANET_BUFFER)) {
        JanetBuffer *buf = janet_unwrap_buffer(argv[n]);
        janet_buffer_push_u8(buf, 0);
        buf->count--;
        return (const char *)buf->data;
    }
    return janet_getcstring(argv, n);
}

* understand the following warnings and implications:

$ jpm clean && jpm test
Deleted build directory build
compiling janet-tree-sitter/tree_sitter.c to build/janet-tree-sitter___tree_sitter.o...
compiling tree-sitter/lib/src/lib.c to build/tree-sitter___lib___src___lib.o...
generating meta file build/_tree-sitter.meta.janet...
janet-tree-sitter/tree_sitter.c: In function ‘cfun_node_tree’:
janet-tree-sitter/tree_sitter.c:661:12: warning: assignment discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
  661 |   *tree_pp = node.tree;
      |            ^
janet-tree-sitter/tree_sitter.c: In function ‘cfun_parser_language’:
janet-tree-sitter/tree_sitter.c:913:12: warning: assignment discards ‘const’ qualifier from pointer target type [-Wdiscarded-qualifiers]
  913 |   *lang_pp = ts_parser_language(*parser_pp);
      |            ^

* add test for print-s-expr comparing with result of tree-sitter parse result?
  clojure's core.clj might not be a bad thing to test against.

* should nil be returned from things like cfun_node_first_named_child_for_byte
  or cfun_node_first_child_for_byte or should a node which passes the ts_node_is_null
  test be returned instead?

* consider emulating portions of emacs' tree-sitter integration api, e.g.
  treesit-search-subtree

* figure out how to not depend on path.janet?

* valgrind
  * invocation command(s):
  valgrind --tool=memcheck --track-origins=yes --trace-children=yes --dsymutil=yes --leak-check=full --show-leak-kinds=all --show-error-list=yes janet usages/clojure.janet
  valgrind --tool=callgrind janet usages/clojure.janet
  kcachegrind callgrind.out.*
  * understanding the output
  * https://github.com/janet-lang/janet/blob/d3e52a2afb908509f2bfc13e1b4ca07f7d8dd190/Makefile#L186-L216

* consider dynamic variable to hold current source, then have a node_text
  function?

* implement compare, tostring, etc. in abstract?

  struct JanetAbstractType {
      const char *name;
      int (*gc)(void *data, size_t len);
      int (*gcmark)(void *data, size_t len);
      int (*get)(void *data, Janet key, Janet *out);
      void (*put)(void *data, Janet key, Janet value);
      void (*marshal)(void *p, JanetMarshalContext *ctx);
      void *(*unmarshal)(JanetMarshalContext *ctx);
      void (*tostring)(void *p, JanetBuffer *buffer);
      int (*compare)(void *lhs, void *rhs);
      int32_t (*hash)(void *p, size_t len);
      Janet(*next)(void *p, Janet key);
      Janet(*call)(void *p, int32_t argc, Janet *argv);
      size_t (*length)(void *p, size_t len);
      JanetByteView(*bytes)(void *p, size_t len);
  };

* possibly look at this stackoverflow post later:
  https://stackoverflow.com/questions/49322955/c-copy-struct-with-pointers-from-stack-to-heap/49323149
  it mentions TSNode
